{"version":3,"sources":["components/ContactList/transitions/addTransition.module.css","components/ContactForm/contactForm.module.css","components/Error/error.module.css","components/Error/errorTransition.module.css","components/ContactList/contactList.module.css","components/Filter/filter.module.css","app.module.css","logoTransition.module.css","components/Error/error.js","redux/contacts-selectors.js","components/ContactForm/contactForm.js","svg/cross.js","components/ContactList/contactList.js","components/Filter/filter.js","views/ContactsView.js"],"names":["module","exports","Error","CSSTransition","in","timeout","classNames","errorTransition","unmountOnExit","className","s","box","getLoading","state","contacts","loading","getAllContacts","items","getFilter","filter","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","name","includes","ContactForm","loginInputId","shortid","generate","number","error","handleNameChange","event","target","value","setState","handleSubmit","preventDefault","props","find","contact","setTimeout","onSubmit","reset","this","contactForm","labelForm","htmlFor","inputForm","type","id","onChange","buttonContactForm","Component","connect","dispatch","contactsOperations","addContact","Cross","data-name","fill","width","height","viewBox","xmlns","rx","transform","x","y","ContactList","onDeleteContact","console","log","TransitionGroup","component","list","map","addTransition","appear","item","buttonDelete","onClick","deleteContact","e","contactsAction","label","input","ContactsView","fetchContacts","logoTransition","title","isloadingContacts"],"mappings":"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","file":"static/js/3.68d51c5a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"addTransition_enter__3Z_LA\",\"enterActive\":\"addTransition_enterActive__3A6JT\",\"exit\":\"addTransition_exit__2pRWX\",\"exitActive\":\"addTransition_exitActive__sk3MZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"contactForm_contactForm__2leNd\",\"labelForm\":\"contactForm_labelForm__108mt\",\"inputForm\":\"contactForm_inputForm__2N457\",\"buttonContactForm\":\"contactForm_buttonContactForm__2b9Ri\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"error_box__2AiIf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"errorTransition_enter__2_wav\",\"enterActive\":\"errorTransition_enterActive__2qmF0\",\"exit\":\"errorTransition_exit__3P-rp\",\"exitActive\":\"errorTransition_exitActive__3bF8k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonDelete\":\"contactList_buttonDelete__1KIRp\",\"item\":\"contactList_item__1Zfmy\",\"number\":\"contactList_number__PxfHE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"filter_filter__1EaBe\",\"input\":\"filter_input__1g0Wd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"app_title__2fbQI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appear\":\"logoTransition_appear__3AKSh\",\"appearActive\":\"logoTransition_appearActive__2IOna\"};","import React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport s from 'components/Error/error.module.css';\nimport errorTransition from 'components/Error/errorTransition.module.css';\nconst Error = () => {\n    return (\n         <CSSTransition\n            in={true}\n            timeout={250}\n            classNames={errorTransition}\n            unmountOnExit\n        >\n            <div className={s.box}>Contact is already exists!</div>\n            </CSSTransition>\n    )\n}\nexport default Error;","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getLoading = state => state.contacts.loading;\n\nexport const getAllContacts = state => state.contacts.items;\n\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = createSelector(\n    [getAllContacts, getFilter],\n    (contacts, filter) => {\n        const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(({name})  =>\n    name.toLowerCase().includes(normalizedFilter));\n    }\n)\n\n\n// export const getVisibleContacts = state => {\n//     const contacts = getAllContacts(state);\n//     const filter = getFilter(state);\n//     const normalizedFilter = filter.toLowerCase();\n//     return contacts.filter(contact  =>\n//     contact.name.toLowerCase().includes(normalizedFilter));\n// }\n","import PropTypes from 'prop-types';\nimport shortid from 'shortid';\nimport React, { Component } from 'react';\nimport s from 'components/ContactForm/contactForm.module.css';\nimport { connect } from 'react-redux';\nimport contactsOperations from 'redux/contacts-operations';\nimport Error from 'components/Error/error';\nimport { getAllContacts, getName } from 'redux/contacts-selectors';\n// import { toast } from 'react-toastify';\n\nclass ContactForm extends Component{\n    loginInputId = shortid.generate();\n    state = {\n        name: '',\n      number: '',\n      error: false,\n      }\n  handleNameChange = event => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = event => {\n     event.preventDefault();\n    \n    if (this.props.contacts.find(contact  =>  contact.name === this.state.name)){\n      this.setState({\n        error: true,\n      })\n      return setTimeout(() => this.setState({ error: false, }), 500);\n     }\n    this.props.onSubmit(this.state);\n    this.reset();\n  }\n  reset = () => {\n          this.setState({name: '', number:''})\n  }\n  \n  render() {\n    const { error } = this.state;\n    return (\n              <>\n              <form className={s.contactForm}\n                onSubmit={this.handleSubmit}>\n                <label className={s.labelForm} htmlFor={this.loginInputId}>Name</label>\n                <input className={s.inputForm} type=\"text\" name=\"name\" id={this.loginInputId} value={this.state.name} onChange={this.handleNameChange}/>\n                <label className={s.labelForm} htmlFor={this.loginInputId}>Number</label>\n                <input className={s.inputForm}  type=\"tel\" name=\"number\" id={this.loginInputId} value={this.state.number} onChange={this.handleNameChange}/>\n                <button className={s.buttonContactForm} type=\"submit\">Add contact</button>\n              </form>\n              { error && <Error /> } \n    </>\n            );\n          }}\n\n          ContactForm.propTypes = {\n            handleSubmit: PropTypes.func,\n            onAddContact: PropTypes.func,\n            loginInputId: PropTypes.func,\n            name: PropTypes.string,\n            number: PropTypes.number,\n          };\n\nconst mapStateToProps = (state) => ({\n  // console.log(state);\n  contacts: getAllContacts(state),\n});\n         \nconst mapDispatchToProps = dispatch => ({\n  onSubmit: ({ name, number }) => dispatch(contactsOperations.addContact({ name, number})),\n});\n  \nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import React from 'react';\n const Cross = ()=>{\n    return(\n  <svg data-name=\"Layer 2\" fill=\"white\" width=\"60\" height=\"60\" id=\"bcc87848-35d3-4b8c-bef5-f50bbd1dee72\" viewBox=\"0 0 38 38\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"2.5\" rx=\"1.25\" transform=\"translate(19 45.87) rotate(-135)\" width=\"15.435\" x=\"11.282\" y=\"17.75\"/><rect height=\"2.5\" rx=\"1.25\" transform=\"translate(-7.87 19) rotate(-45)\" width=\"15.435\" x=\"11.282\" y=\"17.75\"/></svg>\n)\n}\nexport default Cross;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport s from 'components/ContactList/contactList.module.css';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport  addTransition from 'components/ContactList/transitions/addTransition.module.css';\nimport Cross from 'svg/cross';\nimport contactsOperations from 'redux/contacts-operations';\nimport { connect } from 'react-redux';\nimport { getVisibleContacts } from 'redux/contacts-selectors';\n\n\nclass ContactList extends Component {\n \n  render() {\n    const { contacts, onDeleteContact } = this.props;\n    console.log('props', this.props)\n\n    return (\n      <TransitionGroup component=\"ul\" className={s.list}>\n        {contacts.map(({ id, name, number }) => (\n          <CSSTransition key={id} timeout={250} classNames={addTransition} appear={true} unmountOnExit>\n            <li className={s.item}>\n              <div>{name}</div>\n              <div className={s.number}>{number}</div>\n              <button className={s.buttonDelete} type=\"button\" onClick={() => onDeleteContact(id)}><Cross />\n              </button>\n            </li>\n          </CSSTransition>\n        ))}\n      </TransitionGroup>\n    );\n  }\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.number,\n    }),\n  )\n};\n\nconst mapStateToProps = (state) => ({\ncontacts: getVisibleContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: id => dispatch(contactsOperations.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n\n\n\n\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {CSSTransition } from 'react-transition-group';\nimport addTransition from 'components/ContactList/transitions/addTransition.module.css';\nimport s from 'components/Filter/filter.module.css';\nimport * as contactsAction from 'redux/contacts-actions';\nimport { getFilter } from 'redux/contacts-selectors';\n\nfunction Filter({value, onChange}){\n    return (  \n        <CSSTransition timeout={250} classNames={addTransition} appear={true}>\n            <form className={s.filter}>\n            <label className={s.label}>Find contacts by name</label>\n                <input className={s.input} type=\"name\" value={value} onChange={onChange} />\n            </form>\n            </CSSTransition>  \n            \n    )\n}\nFilter.propTypes = {\n    value: PropTypes.string,\n    onChangeFilter: PropTypes.func,\n};\n\nconst mapStateToProps = (state) => ({\n    value: getFilter(state),\n})\n\nconst mapDispatchToProps = dispatch =>({\n onChange: (e) => dispatch(contactsAction.changeFilter(e.target.value))  \n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React, { Component } from 'react';\nimport ContactForm from 'components/ContactForm/contactForm';\nimport ContactList from 'components/ContactList/contactList';\nimport Filter from 'components/Filter/filter';\nimport s from 'app.module.css';\nimport Container from 'components/Container/container';\nimport { CSSTransition } from 'react-transition-group';\nimport logoTransition from 'logoTransition.module.css';\nimport { connect } from 'react-redux';\nimport contactsOperations from 'redux/contacts-operations';\nimport { getLoading } from 'redux/contacts-selectors';\n\nclass ContactsView extends Component {\n\n  componentDidMount() {\n  this.props.fetchContacts();  \n  }\n\n  render() {\n    return (\n      <Container>\n        <CSSTransition\n          in={true}\n          appear={true}\n          timeout={500}\n          classNames={logoTransition}\n        unmountOnExit\n        >\n          <h1 className={s.title}>Phonebook</h1>\n          </CSSTransition>\n     <ContactForm/>\n        <Filter />\n        {this.props.isloadingContacts && <h1>loading...</h1>}\n        <ContactList/>\n      </Container>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isloadingContacts: getLoading(state),\n})\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsView);"],"sourceRoot":""}